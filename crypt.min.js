async function encrypt(e,t){const n=await encryptData(e,t);await decryptData(n,t);return n}async function decrypt(e,t){const n=await decryptData(e,t),a=Systemm.render(n);return document.getElementById("niv").innerHTML=a,a}async function encryptData(e,t){try{const n=window.crypto.getRandomValues(new Uint8Array(16)),a=window.crypto.getRandomValues(new Uint8Array(12)),r=await getPasswordKey(t),c=await deriveKey(r,n,["encrypt"]),y=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:a},c,enc.encode(e)),o=new Uint8Array(y);let i=new Uint8Array(n.byteLength+a.byteLength+o.byteLength);i.set(n,0),i.set(a,n.byteLength),i.set(o,n.byteLength+a.byteLength);const s=buff_to_base64(i);return s}catch(e){return""}}async function decryptData(e,t){try{const n=base64_to_buf(e),a=n.slice(0,16),r=n.slice(16,28),c=n.slice(28),y=await getPasswordKey(t),o=await deriveKey(y,a,["decrypt"]),i=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:r},o,c);return dec.decode(i)}catch(e){return""}}const buff_to_base64=e=>btoa(String.fromCharCode.apply(null,e)),base64_to_buf=e=>Uint8Array.from(atob(e),e=>e.charCodeAt(null)),enc=new TextEncoder,dec=new TextDecoder,getPasswordKey=e=>window.crypto.subtle.importKey("raw",enc.encode(e),"PBKDF2",!1,["deriveKey"]),deriveKey=(e,t,n)=>window.crypto.subtle.deriveKey({name:"PBKDF2",salt:t,iterations:25e4,hash:"SHA-256"},e,{name:"AES-GCM",length:256},!1,n);